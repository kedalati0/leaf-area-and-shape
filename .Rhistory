http://bioconductor.org/biocLite.R
"http://bioconductor.org/biocLite.R"
"phyloseq"
"http://bioconductor.org/biocLite.R" "phyloseq"
"phyloseq"
install.packages(""http://bioconductor.org/biocLite.R"")
install.packages("phyloseq")
install.packages("githubinstall")
install.packages("githubinstall")
install.packages("devtools")
library("devtools")
install_github("phyloseq/joey711")
library("devtools")
install_github("phyloseq/joey711")
install_phyloseq(branch = "github")
if(!requireNamespace("BiocManager")){
install.packages("BiocManager")
}
BiocManager::install("phyloseq")
install.packages("BiocManager")
BiocManager::install("Phyloseq")
yes
a
y
BiocManager::install('phyloseq')
BiocManager::install(microbiomeseq)
BiocManager::install("microbiomeseq")
githubinstall::gh_install_packages("microbiomeSeq")
"2"
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("AnnotationDbi", "DESeq2", "GO.db", "impute", "phyloseq", "preprocessCore"))
"restart"
"restart"
defaults write org.R-project.R force.LANG en_US.UTF-8.
(!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("AnnotationDbi", "DESeq2", "GO.db", "impute", "phyloseq", "preprocessCore"))
install.packages("BiocManager")
BiocManager::install("microbiomeSeq")
http://www.bioconductor.org/biocLite.R
source("http://www.bioconductor.org/biocLite.R")
biocLite(c("fastcluster", "df2json", "rjson", "gplots", "devtools", "ggplot2","MASS","minet","mixOmics", "qvalue","reshape2","RPA","svDialogs","WGCNA"))
BiocManager::install("biocLite")
githubinstall::gh_install_packages("biocLite")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("biocLite")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(microbiomeSeq)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("microbiomeSeq")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("microbiome")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("biocLite")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("microbiomeSeq")
library(microbiomeSeq)
library(devtools)
install_github("umerijaz/microbiomeSeq")
remove.packages("vegan", lib="~/R/win-library/3.6")
library(devtools)
install_github("umerijaz/microbiomeSeq")
library(microbiomeSeq)
Skip to content
Why GitHub?
Enterprise
Explore
Marketplace
Pricing
Search
Sign in
Sign up
Code  Issues 18  Pull requests 1  Projects 0  Wiki  Security  Pulse
Join GitHub today
GitHub is home to over 40 million developers working together to host and review code, manage projects, and build software together.
microbiomeSeq/R/microbiomeSeq_helper_fxns.R
@AlfredUg AlfredUg ordination updates
5548f9e on Dec 6, 2017
23 lines (20 sloc)  725 Bytes
identify.num.variables <- function(physeq){
meta_table <- sample_data(physeq)
num.variables <- meta_table[,sapply(meta_table,is.numeric)]
names.num.variables <- names(num.variables)
return(names.num.variables)
}
get.num.variables <- function(physeq){
meta_table <- sample_data(physeq)
num.variables <- meta_table[,identify.num.variables(physeq)]
not.num.variables <- meta_table[,!colnames(meta_table)%in%colnames(num.variables)]
out <- list(num.variables=num.variables, notnum.variables=not.num.variables)
return(out)
}
select.vars <- function(df1, df2, select.variables=NULL){
if(!is.null(select.variables)){
df1 <- df1[,colnames(df1)%in%select.variables]
}
out<-cbind(df1,df2)
return(out)
}
© 2019 GitHub, Inc.
Terms
Privacy
Security
Status
Help
Contact GitHub
Pricing
API
Training
Blog
About
library(microbiomeSeq)
library(devtools)
install_github("umerijaz/microbiomeSeq")
library(microbiomeSeq)
install.packages("vegan")
library(devtools)
install_github("umerijaz/microbiomeSeq")
library(microbiomeSeq)
library(devtools)
install_github("umerijaz/microbiomeSeq")
demo()
q()
if(!requireNamespace("BiocManager")){
install.packages("BiocManager")
}
BiocManager::install("phyloseq")
install_github("umerijaz/microbiomeSeq")  # Install the package
library(githubinstall)
library(devtools)
install.packages("WGCNA")
install.packages("fso")
install.packages("randomForest")
library(phyloseq)
library(vegan)
library(DESeq2)
library(ggplot2)
library(randomForest)
library(gridExtra)
library(data.table)
library(fso)
library(WGCNA)
library(igraph)
library(devtools)  # Load the devtools package
install_github("umerijaz/microbiomeSeq")  # Install the package
library(microbiomeSeq)  #load the package
install.packages("C:/Users/kiumars/Downloads/microbiomeSeq-master.zip", repos = NULL, type = "win.binary")
install.packages(microbiomeseq)
githubinstall::gh_install_packages(microbiomeseq)
library(devtools)
detach("package:devtools", unload = TRUE)
library(devtools)
install_github("umerijaz/microbiomeSeq")
detach(data.table)
install.packages("microbiomeseq")
install.packages("dplyr")
install.packages("devtools")
install_github("umerijaz/microbiomeSeq")
install.packages("githubinstall")
install_github("umerijaz/microbiomeSeq")
library(githubinstall)
install_github("umerijaz/microbiomeSeq")
(!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("AnnotationDbi", "DESeq2", "GO.db", "impute", "phyloseq", "preprocessCore"))
install.packages("BiocManager")
(!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("AnnotationDbi", "DESeq2", "GO.db", "impute", "phyloseq", "preprocessCore"))
install_github("umerijaz/microbiomeSeq")
library(githubinstall)
install_github("umerijaz/microbiomeSeq")
githubinstall::githubinstall("umerijaz/microbiomeSeq")
install.packages("adespatial")
install.packages("C:/Users/kiumars/Downloads/ranacapa-master.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/kiumars/Downloads/ranacapa-master.zip", repos = NULL, type = "win.binary")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
library(devtools)
library(devtools)
devtools::install_github("gauravsk/ranacapa")
install.packages("pulsar")
install.packages("VGAM")
library(devtools)
install_github("zdk123/SpiecEasi")
library(SpiecEasi)
install.packages("huge")
library(devtools)
install_github("zdk123/SpiecEasi")
library(SpiecEasi)
force = true
force = TRUE
library(devtools)
install_github("zdk123/SpiecEasi")
library(SpiecEasi)
force = TRUE
read.csv("LEAF SIZE AND SHAPE.CSV")
getwd()
read.csv("Leaf Area and Shape.CSV")
c = read.csv("Leaf Area and Shape.CSV")
View(c)
head(c)
str(c)
c = read.csv("Leaf Area and Shape.CSV", string.s = FALSE)
c = read.csv("Leaf Area and Shape.CSV", string .s = FALSE)
c = read.csv("Leaf Area and Shape.CSV", string.as.factor = FALSE)
c = read.csv("Leaf Area and Shape.CSV", string.as.factor= FALSE)
c = read.csv("Leaf Area and Shape.CSV", stringsAsFactors = FALSE)
str(c)
## str to see the type of variables in data frame
strsplit(c$file.name)
## str to see the type of variables in data frame
strsplit(c$file.name, "_")
## str to see the type of variables in data frame
d = strsplit(c$file.name, "_")
View(d)
## this allows us t select the column name
## extract first element for each item
class(c)
## tells you the type of object you have
class(d)
lapply(d, function(x) x[1])
e = lapply(d, function(x) x[1])
## list apply function= apply a function to each item in the list
f = unlist(e)
class (f)
c $plant.ID = f
head (c)
tail (c)
cd
getwd
getwd()
getwd
getwd()
View(d)
View(e)
View(c)
head(218)
head(c, 218)
View(c)
g = c[219:nrow(c),]
View(g)
## to crop the rows into new table
read.csv(architect.csv)
## to crop the rows into new table
read.csv("architect.csv")
## to crop the rows into new table
read.csv("architect.csv")
getwd()
setwd("~/")
getwd()
setwd("~/")
setwd("leaf area and shape")
getwd()
## to crop the rows into new table
read.csv("architect.csv")
read.csv("architect.csv")
read.csv("trait")
read.csv("trait.csv")
read.csv("traits.csv")
traits = read.csv(traits.csv)
traits = read.csv (traits.csv)
traits = read.csv("traits.csv")
architect = read.csv("architect.csv")
View(traits)
View(architect)
merge = merge(x=traits[,c("plant ID", "spcod", "cii")],y=architect[,c("plant ID", "dbh", "tnlc")],by= “plantID”)
merge = merge(x=traits[,c("plant ID", "spcod", "cii")],y=architect[,c("plant ID", "dbh", "tnlc")],by= plantID)
merge = merge(x=traits[,c("plantID", "spcod", "cii")],y=architect[,c("plantID", "dbh", "tnlc")],by= plantID)
merge = merge(x=traits[,c("plantID", "spcod", "cii")],y=architect[,c("plantID", "dbh", "tnlc")],by= "plantID")
View(merge)
View(c)
View(g)
names(g)[3] = "plantID"
k = aggregate(leafarea~plantID,g,mean)
View(g)
k = aggregate(Area.real..px.2.~plantID,g,mean)
View(k)
