http://bioconductor.org/biocLite.R
"http://bioconductor.org/biocLite.R"
"phyloseq"
"http://bioconductor.org/biocLite.R" "phyloseq"
"phyloseq"
install.packages(""http://bioconductor.org/biocLite.R"")
install.packages("phyloseq")
install.packages("githubinstall")
install.packages("githubinstall")
install.packages("devtools")
library("devtools")
install_github("phyloseq/joey711")
library("devtools")
install_github("phyloseq/joey711")
install_phyloseq(branch = "github")
if(!requireNamespace("BiocManager")){
install.packages("BiocManager")
}
BiocManager::install("phyloseq")
install.packages("BiocManager")
BiocManager::install("Phyloseq")
yes
a
y
BiocManager::install('phyloseq')
BiocManager::install(microbiomeseq)
BiocManager::install("microbiomeseq")
githubinstall::gh_install_packages("microbiomeSeq")
"2"
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("AnnotationDbi", "DESeq2", "GO.db", "impute", "phyloseq", "preprocessCore"))
"restart"
"restart"
defaults write org.R-project.R force.LANG en_US.UTF-8.
(!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("AnnotationDbi", "DESeq2", "GO.db", "impute", "phyloseq", "preprocessCore"))
install.packages("BiocManager")
BiocManager::install("microbiomeSeq")
http://www.bioconductor.org/biocLite.R
source("http://www.bioconductor.org/biocLite.R")
biocLite(c("fastcluster", "df2json", "rjson", "gplots", "devtools", "ggplot2","MASS","minet","mixOmics", "qvalue","reshape2","RPA","svDialogs","WGCNA"))
BiocManager::install("biocLite")
githubinstall::gh_install_packages("biocLite")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("biocLite")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(microbiomeSeq)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("microbiomeSeq")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("microbiome")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("biocLite")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("microbiomeSeq")
library(microbiomeSeq)
library(devtools)
install_github("umerijaz/microbiomeSeq")
remove.packages("vegan", lib="~/R/win-library/3.6")
library(devtools)
install_github("umerijaz/microbiomeSeq")
library(microbiomeSeq)
Skip to content
Why GitHub?
Enterprise
Explore
Marketplace
Pricing
Search
Sign in
Sign up
Code  Issues 18  Pull requests 1  Projects 0  Wiki  Security  Pulse
Join GitHub today
GitHub is home to over 40 million developers working together to host and review code, manage projects, and build software together.
microbiomeSeq/R/microbiomeSeq_helper_fxns.R
@AlfredUg AlfredUg ordination updates
5548f9e on Dec 6, 2017
23 lines (20 sloc)  725 Bytes
identify.num.variables <- function(physeq){
meta_table <- sample_data(physeq)
num.variables <- meta_table[,sapply(meta_table,is.numeric)]
names.num.variables <- names(num.variables)
return(names.num.variables)
}
get.num.variables <- function(physeq){
meta_table <- sample_data(physeq)
num.variables <- meta_table[,identify.num.variables(physeq)]
not.num.variables <- meta_table[,!colnames(meta_table)%in%colnames(num.variables)]
out <- list(num.variables=num.variables, notnum.variables=not.num.variables)
return(out)
}
select.vars <- function(df1, df2, select.variables=NULL){
if(!is.null(select.variables)){
df1 <- df1[,colnames(df1)%in%select.variables]
}
out<-cbind(df1,df2)
return(out)
}
Â© 2019 GitHub, Inc.
Terms
Privacy
Security
Status
Help
Contact GitHub
Pricing
API
Training
Blog
About
library(microbiomeSeq)
library(devtools)
install_github("umerijaz/microbiomeSeq")
library(microbiomeSeq)
install.packages("vegan")
library(devtools)
install_github("umerijaz/microbiomeSeq")
library(microbiomeSeq)
library(devtools)
install_github("umerijaz/microbiomeSeq")
demo()
q()
if(!requireNamespace("BiocManager")){
install.packages("BiocManager")
}
BiocManager::install("phyloseq")
install_github("umerijaz/microbiomeSeq")  # Install the package
library(githubinstall)
library(devtools)
install.packages("WGCNA")
install.packages("fso")
install.packages("randomForest")
library(phyloseq)
library(vegan)
library(DESeq2)
library(ggplot2)
library(randomForest)
library(gridExtra)
library(data.table)
library(fso)
library(WGCNA)
library(igraph)
library(devtools)  # Load the devtools package
install_github("umerijaz/microbiomeSeq")  # Install the package
library(microbiomeSeq)  #load the package
install.packages("C:/Users/kiumars/Downloads/microbiomeSeq-master.zip", repos = NULL, type = "win.binary")
install.packages(microbiomeseq)
githubinstall::gh_install_packages(microbiomeseq)
library(devtools)
detach("package:devtools", unload = TRUE)
library(devtools)
install_github("umerijaz/microbiomeSeq")
detach(data.table)
install.packages("microbiomeseq")
install.packages("dplyr")
install.packages("devtools")
install_github("umerijaz/microbiomeSeq")
install.packages("githubinstall")
install_github("umerijaz/microbiomeSeq")
library(githubinstall)
install_github("umerijaz/microbiomeSeq")
(!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("AnnotationDbi", "DESeq2", "GO.db", "impute", "phyloseq", "preprocessCore"))
install.packages("BiocManager")
(!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("AnnotationDbi", "DESeq2", "GO.db", "impute", "phyloseq", "preprocessCore"))
install_github("umerijaz/microbiomeSeq")
library(githubinstall)
install_github("umerijaz/microbiomeSeq")
githubinstall::githubinstall("umerijaz/microbiomeSeq")
install.packages("adespatial")
install.packages("C:/Users/kiumars/Downloads/ranacapa-master.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/kiumars/Downloads/ranacapa-master.zip", repos = NULL, type = "win.binary")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
library(devtools)
library(devtools)
devtools::install_github("gauravsk/ranacapa")
install.packages("pulsar")
install.packages("VGAM")
library(devtools)
install_github("zdk123/SpiecEasi")
library(SpiecEasi)
install.packages("huge")
library(devtools)
install_github("zdk123/SpiecEasi")
library(SpiecEasi)
force = true
force = TRUE
library(devtools)
install_github("zdk123/SpiecEasi")
library(SpiecEasi)
force = TRUE
read.csv("Leaf Area and Shape From Trip5-10")
setwd("leaf area and shape")
read.csv("Leaf Area and Shape From Trip5-10")
read.csv("Leaf Area and Shape From Trip5-10")
getwd
getwd()
read.csv("Leaf Area and Shape From Trip5-10.csv")
c = read.csv("Leaf Area and Shape From Trip5-10.csv", stringsAsFactors = FALSE)
head(c)
str(c)
View(c)
## str to see the type of variables in data frame
d = strsplit(c$file.name, "_")
View(d)
## this allows us t select the column name
## extract first element for each item
class(c)
View(c)
e = lapply(d, function(x) x[1])
## list apply function= apply a function to each item in the list
f = unlist(e)
class (f)
c $plant.ID = f
head (c)
tail (c)
g = c[219:nrow(c),]
## to crop the rows into new table
read.csv("architect.csv")
traits = read.csv("traits.csv")
architect = read.csv("architect.csv")
merge = merge(x=traits[,c("plantID", "spcod", "cii")],y=architect[,c("plantID", "dbh", "tnlc")],by= "plantID")
names(g)[3] = "plantID"
k = aggregate(Area.real..px.2.~plantID,g,mean)
View(k)
View(traits)
View(g)
View(g)
k = aggregate(Area.pred..cm.2.~plantID,g,mean)
View(k)
View(k)
nrow(k)
View(k)
View(k)
e = lapply(d, function(x) x[1])
## list apply function= apply a function to each item in the list
f = unlist(e)
View(e)
## list apply function= apply a function to each item in the list
f = unlist(e)
setwd("leaf area and shape")
read.csv("Leaf Area and Shape From Trip5-10.csv")
c = read.csv("Leaf Area and Shape From Trip5-10.csv", stringsAsFactors = FALSE)
View(c)
str(c)
View(c)
## str to see the type of variables in data frame
d = strsplit(c$file.name, "_")
d
View(d)
View(d)
## this allows us to select the column name
## extract first element for each item
class(c)
## tells you the type of object you have
class(d)
e = lapply(d, function(x) x[1])
View(e)
View(c)
## str to see the type of variables in data frame
c  = c[215:nrow(c),]
View(c)
d = strsplit(c$file.name, "_")
e = lapply(d, function(x) x[1])
View(e)
e
##everytime you create an object, open the object and check
## list apply function= apply a function to each item in the list
f = unlist(e)
## converts list into vector
f
class (f)
View(e)
View(c)
## converts list into vector
as.numeric(f)
##it gives you the nymerics after converting it
is.na(as.numeric(f))
##it gives you the nymerics after converting it
which(is.na(as.numeric(f)))
View(e)
View(e)
View(d)
View(c)
##it gives you the nymerics after converting it
f(which(is.na(as.numeric(f))))
##it gives you the nymerics after converting it
f[which(is.na(as.numeric(f)))]
f
View(c)
c = read.csv("Leaf Area and Shape From Trip5-10.csv", stringsAsFactors = FALSE)
View(c)
View(c)
## str to see the type of variables in data frame
c  = c[215:4540,]
View(c)
e = lapply(d, function(x) x[1])
##everytime you create an object, open the object and check
## list apply function= apply a function to each item in the list
f = unlist(e)
## converts list into vector
as.numeric(f)
##it gives you the nymerics after converting it
f[which(is.na(as.numeric(f)))]
## str to see the type of variables in data frame
c  = c[215:4540,]
d = strsplit(c$file.name, "_")
setwd("leaf area and shape")
read.csv("Leaf Area and Shape From Trip5-10.csv")
c = read.csv("Leaf Area and Shape From Trip5-10.csv", stringsAsFactors = FALSE)
##stringsAsFactors = FALSE dont transform categorical variables into factors
head(c)
str(c)
## str to see the type of variables in data frame
c  = c[215:4540,]
d = strsplit(c$file.name, "_")
## this allows us to select the column name
## extract first element for each item
class(c)
## tells you the type of object you have
class(d)
e = lapply(d, function(x) x[1])
e
##everytime you create an object, open the object and check
## list apply function= apply a function to each item in the list
f = unlist(e)
## converts list into vector
as.numeric(f)
##it gives you the nymerics after converting it
f[which(is.na(as.numeric(f)))]
f[f==â230182POUFULâ]
f[f==230182POUFUL]
f[f=="230182POUFUL"]
f[f=="230182POUFUL"]
##it gives you the location of the non numerics
f=="230182POUFUL"
##it gives you the location of the non numerics
f[f=="230182POUFUL"]
##it gives you the location of the non numerics
f[f=="230182POUFUL"]= 230182
##return me every f with this value(logic operator)
##[] means subset or filter what I want
f[f=="230378LACSP1"]= 230378
##it gives you the nymerics after converting it
f[which(is.na(as.numeric(f)))]
f= numeric(f)
f= as.numeric(f)
f
c $plant.ID = f
View(c)
View(c)
View(c)
##inserts the plant id from f
head (c)
tail (c)
k = aggregate(Area.pred..cm.2.~plantID,c,mean)
k = aggregate(Area.pred..cm.2.~plant.ID,c,mean)
View(k)
View(k)
View(k)
read.csv("architect.csv")
"architect" = read.csv("architect.csv")
View(architect)
View(architect)
"dbh" = strsplit(c$dbh, "_")
architect = read.csv("architect.csv")
View(architect)
View(k)
View(architect)
architect= subset(architect, select = c("plantID", "dbh", "tnlc", "cii"))
View(architect)
## we use this function to select a specific column
names(k)
names(k)[1] = âplantIDâ
View(k)
names(k)[1] = plantID
names(k)[1] = "plantID"
##to replace the plant.ID with plantID
head(merge(architect, k, by = "plantID"))
View(architect)
##to replace the plant.ID with plantID
l= merge(architect, k, by = "plantID")
View(l)
## merge the archtect and k table based on plantID
## we need to go back and correct the plant ID without dbh
l= subset(l, !is.na(dbh) & !is.na(tnlc) & !is.na(cii))
l
## use this function to get rid of the NA
his(l$Area.pred..cm.2.)
## use this function to get rid of the NA
hist(l$Area.pred..cm.2.)
hist(log(l$area))
hist(log(l$area))
hist(log(l$Area.pred..cm.2.))
## the data is in logarithmic form
hist(l$tnlc)
hist(log(l$tnlc))
plot(Area.pred..cm.2.~tnlc, l)
plot(Area.pred..cm.2.~tnlc, l, log="xy")
##to create a logarithmic plot
lm(tnlc~area, l)
##to create a logarithmic plot
lm(tnlc~Area.pred..cm.2,, l)
##to create a logarithmic plot
lm(tnlc~Area.pred..cm.2,, l)
##to create a logarithmic plot
lm(log(l$tnlc)~Log(l$Area.pred..cm.2)
##to create a logarithmic plot
lm(log(l$tnlc)~log(l$Area.pred..cm.2)
##to create a logarithmic plot
lm(log(l$tnlc)~log(l$Area.pred..cm.2)
##to create a logarithmic plot
lm(log(l$tnlc)~log(l$Area.pred..cm.2))
##to create a logarithmic plot
lm(log(l$tnlc)~log(l$Area.pred..cm.2))
mod = lm(log(l$tnlc)~log(l$Area.pred..cm.2))
View(mod)
summary(mod)
View(mod)
getwd()
plot(x=log(l$area),y=log(l$tnlc))
plot(x=log(l$area), y=log(l$tnlc))
plot(y=log(l$area), x=log(l$tnlc))
plot(x=log(l$area), y=log(l$tnlc))
names(k)[2] = "area"
##to replace the plant.ID with plantID
l= merge(architect, k, by = "plantID")
## merge the archtect and k table based on plantID
## we need to go back and correct the plant ID without dbh
l= subset(l, !is.na(dbh) & !is.na(tnlc) & !is.na(cii))
## use this function to get rid of the NA
hist(l$Area.pred..cm.2.)
## use this function to get rid of the NA
hist(l$area)
##create a histogram
hist(log(l$area))
## the data is in logarithmic form
hist(l$tnlc)
plot(Area.pred..cm.2.~tnlc, l, log="xy")
plot(area~tnlc, l, log="xy")
##to create a logarithmic plot
lm(log(l$tnlc)~log(l$area))
mod = lm(log(l$tnlc)~log(l$area))
plot(x=log(l$area), y=log(l$tnlc))
abline(mod)
plot(x=log(l$area), y=log(l$tnlc), cex=log(l$dbh/1000))
abline(plot)
abline(plot)
abline(mod)
plot(x=log(l$area), y=log(l$tnlc), cex=log(l$dbh/1000), xlab = "logged leaf area", ylab = "leaf number")
plot(x=log(l$area), y=log(l$tnlc), cex=log(l$dbh/1000), xlab = "logged leaf area", ylab = "leaf number",
pch=16, col=round(l$cii))
plot(x=log(l$area), y=log(l$tnlc), cex=log(l$dbh/1000), xlab = "logged leaf area", ylab = "leaf number",
pch=16, col=round(l$cii)), legend( "topright",pch = 16, col=1:3,legend=1:3)
plot(x=log(l$area), y=log(l$tnlc), cex=log(l$dbh/1000), xlab = "logged leaf area", ylab = "leaf number",
pch=16, col=round(l$cii))
legend( "topright",pch = 16, col=1:3,legend=1:3)
legend( "topright",pch = 16, col=1:3,legend=1:3, title = "L")
legend( "topright",pch = 16, col=1:3,legend=1:3, title = "Light")
legend("bottomleft", pch=1, col=1, legend = 1:4, cex = log(1:4))
legend("bottomleft", pch=1, col=1, legend = 1:4, cex+log(1:4))
legend("bottomleft", pch=1, col=1, legend = 1:4, cex=log(1:4))
legend("bottomleft", pch=1, col=1, legend = 1:4, cex=log(1:3))
legend("bottomleft", pch=1, col=1, legend = 1:4, cex= log(1:4))
legend("bottomleft", pch=1, col=1, legend = 1:4, cex = log(1:4))
legend("bottomleft", pch=1, col=2, legend = 1:4, cex = log(1:4))
legend("bottomleft", pch=16, col=1, legend = 1:4, cex = log(1:4))
legend("bottomleft", pch=1, col=1, legend=1:4, cex = log(1:4))
legend("bottomleft", pch=1, col=1, legend=1:4, cex = log(1))
legend("bottomleft", pch=1, col=1, legend=1:4, cex = 1:4)
legend("bottomleft", pch=1, col=1, legend=1:4, cex = log("1:4")
range(l$dbh/1000)
range(l$dbh/1000)
legend("bottomleft", pch=1, col=1, legend=1:4, cex = log(c( 1.1:4.073)))
legend("bottomleft", pch=1, col=1, legend=1:4, cex = log(c( 1.1, 2.1, 3.1, 4.1)))
legend("bottomleft", pch=1, col=1, legend=1:4, cex = log(c( 1.1: 4.1)))
legend("bottomleft", pch=1, col=1, legend=1:4, cex = log(1.1: 4.1))
legend("bottomleft", pch=1, col=1, legend=1:4, cex = log(1.1))
plot(x=log(l$area), y=log(l$tnlc), cex=log(l$dbh/1000+1), xlab = "logged leaf area", ylab = "leaf number",
pch=16, col=round(l$cii))
legend( "topright",pch = 16, col=1:3,legend=1:3, title = "Light")
legend("bottomleft", pch=1, col=1, legend=1:4, cex = log(1:4+1))
legend("bottomleft", pch=1, col=1, legend=1:4, cex = log(1:4))
legend("bottomleft", pch=1, col=1, legend=1:4, cex = 1:4
legend("bottomleft", pch=1, col=1, legend=1:4, cex = 1:4)
