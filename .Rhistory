library(SpiecEasi)
install.packages("huge")
library(devtools)
install_github("zdk123/SpiecEasi")
library(SpiecEasi)
force = true
force = TRUE
library(devtools)
install_github("zdk123/SpiecEasi")
library(SpiecEasi)
force = TRUE
read.csv("Leaf Area and Shape From Trip5-10")
setwd("leaf area and shape")
read.csv("Leaf Area and Shape From Trip5-10")
read.csv("Leaf Area and Shape From Trip5-10")
getwd
getwd()
read.csv("Leaf Area and Shape From Trip5-10.csv")
c = read.csv("Leaf Area and Shape From Trip5-10.csv", stringsAsFactors = FALSE)
head(c)
str(c)
View(c)
## str to see the type of variables in data frame
d = strsplit(c$file.name, "_")
View(d)
## this allows us t select the column name
## extract first element for each item
class(c)
View(c)
e = lapply(d, function(x) x[1])
## list apply function= apply a function to each item in the list
f = unlist(e)
class (f)
c $plant.ID = f
head (c)
tail (c)
g = c[219:nrow(c),]
## to crop the rows into new table
read.csv("architect.csv")
traits = read.csv("traits.csv")
architect = read.csv("architect.csv")
merge = merge(x=traits[,c("plantID", "spcod", "cii")],y=architect[,c("plantID", "dbh", "tnlc")],by= "plantID")
names(g)[3] = "plantID"
k = aggregate(Area.real..px.2.~plantID,g,mean)
View(k)
View(traits)
View(g)
View(g)
k = aggregate(Area.pred..cm.2.~plantID,g,mean)
View(k)
View(k)
nrow(k)
View(k)
View(k)
e = lapply(d, function(x) x[1])
## list apply function= apply a function to each item in the list
f = unlist(e)
View(e)
## list apply function= apply a function to each item in the list
f = unlist(e)
setwd("leaf area and shape")
read.csv("Leaf Area and Shape From Trip5-10.csv")
c = read.csv("Leaf Area and Shape From Trip5-10.csv", stringsAsFactors = FALSE)
View(c)
str(c)
View(c)
## str to see the type of variables in data frame
d = strsplit(c$file.name, "_")
d
View(d)
View(d)
## this allows us to select the column name
## extract first element for each item
class(c)
## tells you the type of object you have
class(d)
e = lapply(d, function(x) x[1])
View(e)
View(c)
## str to see the type of variables in data frame
c  = c[215:nrow(c),]
View(c)
d = strsplit(c$file.name, "_")
e = lapply(d, function(x) x[1])
View(e)
e
##everytime you create an object, open the object and check
## list apply function= apply a function to each item in the list
f = unlist(e)
## converts list into vector
f
class (f)
View(e)
View(c)
## converts list into vector
as.numeric(f)
##it gives you the nymerics after converting it
is.na(as.numeric(f))
##it gives you the nymerics after converting it
which(is.na(as.numeric(f)))
View(e)
View(e)
View(d)
View(c)
##it gives you the nymerics after converting it
f(which(is.na(as.numeric(f))))
##it gives you the nymerics after converting it
f[which(is.na(as.numeric(f)))]
f
View(c)
c = read.csv("Leaf Area and Shape From Trip5-10.csv", stringsAsFactors = FALSE)
View(c)
View(c)
## str to see the type of variables in data frame
c  = c[215:4540,]
View(c)
e = lapply(d, function(x) x[1])
##everytime you create an object, open the object and check
## list apply function= apply a function to each item in the list
f = unlist(e)
## converts list into vector
as.numeric(f)
##it gives you the nymerics after converting it
f[which(is.na(as.numeric(f)))]
## str to see the type of variables in data frame
c  = c[215:4540,]
d = strsplit(c$file.name, "_")
setwd("leaf area and shape")
read.csv("Leaf Area and Shape From Trip5-10.csv")
c = read.csv("Leaf Area and Shape From Trip5-10.csv", stringsAsFactors = FALSE)
##stringsAsFactors = FALSE dont transform categorical variables into factors
head(c)
str(c)
## str to see the type of variables in data frame
c  = c[215:4540,]
d = strsplit(c$file.name, "_")
## this allows us to select the column name
## extract first element for each item
class(c)
## tells you the type of object you have
class(d)
e = lapply(d, function(x) x[1])
e
##everytime you create an object, open the object and check
## list apply function= apply a function to each item in the list
f = unlist(e)
## converts list into vector
as.numeric(f)
##it gives you the nymerics after converting it
f[which(is.na(as.numeric(f)))]
f[f==“230182POUFUL”]
f[f==230182POUFUL]
f[f=="230182POUFUL"]
f[f=="230182POUFUL"]
##it gives you the location of the non numerics
f=="230182POUFUL"
##it gives you the location of the non numerics
f[f=="230182POUFUL"]
##it gives you the location of the non numerics
f[f=="230182POUFUL"]= 230182
##return me every f with this value(logic operator)
##[] means subset or filter what I want
f[f=="230378LACSP1"]= 230378
##it gives you the nymerics after converting it
f[which(is.na(as.numeric(f)))]
f= numeric(f)
f= as.numeric(f)
f
c $plant.ID = f
View(c)
View(c)
View(c)
##inserts the plant id from f
head (c)
tail (c)
k = aggregate(Area.pred..cm.2.~plantID,c,mean)
k = aggregate(Area.pred..cm.2.~plant.ID,c,mean)
View(k)
View(k)
View(k)
read.csv("architect.csv")
"architect" = read.csv("architect.csv")
View(architect)
View(architect)
"dbh" = strsplit(c$dbh, "_")
architect = read.csv("architect.csv")
View(architect)
View(k)
View(architect)
architect= subset(architect, select = c("plantID", "dbh", "tnlc", "cii"))
View(architect)
## we use this function to select a specific column
names(k)
names(k)[1] = “plantID”
View(k)
names(k)[1] = plantID
names(k)[1] = "plantID"
##to replace the plant.ID with plantID
head(merge(architect, k, by = "plantID"))
View(architect)
##to replace the plant.ID with plantID
l= merge(architect, k, by = "plantID")
View(l)
## merge the archtect and k table based on plantID
## we need to go back and correct the plant ID without dbh
l= subset(l, !is.na(dbh) & !is.na(tnlc) & !is.na(cii))
l
## use this function to get rid of the NA
his(l$Area.pred..cm.2.)
## use this function to get rid of the NA
hist(l$Area.pred..cm.2.)
hist(log(l$area))
hist(log(l$area))
hist(log(l$Area.pred..cm.2.))
## the data is in logarithmic form
hist(l$tnlc)
hist(log(l$tnlc))
plot(Area.pred..cm.2.~tnlc, l)
plot(Area.pred..cm.2.~tnlc, l, log="xy")
##to create a logarithmic plot
lm(tnlc~area, l)
##to create a logarithmic plot
lm(tnlc~Area.pred..cm.2,, l)
##to create a logarithmic plot
lm(tnlc~Area.pred..cm.2,, l)
##to create a logarithmic plot
lm(log(l$tnlc)~Log(l$Area.pred..cm.2)
##to create a logarithmic plot
lm(log(l$tnlc)~log(l$Area.pred..cm.2)
##to create a logarithmic plot
lm(log(l$tnlc)~log(l$Area.pred..cm.2)
##to create a logarithmic plot
lm(log(l$tnlc)~log(l$Area.pred..cm.2))
##to create a logarithmic plot
lm(log(l$tnlc)~log(l$Area.pred..cm.2))
mod = lm(log(l$tnlc)~log(l$Area.pred..cm.2))
View(mod)
summary(mod)
View(mod)
getwd()
plot(x=log(l$area),y=log(l$tnlc))
plot(x=log(l$area), y=log(l$tnlc))
plot(y=log(l$area), x=log(l$tnlc))
plot(x=log(l$area), y=log(l$tnlc))
names(k)[2] = "area"
##to replace the plant.ID with plantID
l= merge(architect, k, by = "plantID")
## merge the archtect and k table based on plantID
## we need to go back and correct the plant ID without dbh
l= subset(l, !is.na(dbh) & !is.na(tnlc) & !is.na(cii))
## use this function to get rid of the NA
hist(l$Area.pred..cm.2.)
## use this function to get rid of the NA
hist(l$area)
##create a histogram
hist(log(l$area))
## the data is in logarithmic form
hist(l$tnlc)
plot(Area.pred..cm.2.~tnlc, l, log="xy")
plot(area~tnlc, l, log="xy")
##to create a logarithmic plot
lm(log(l$tnlc)~log(l$area))
mod = lm(log(l$tnlc)~log(l$area))
plot(x=log(l$area), y=log(l$tnlc))
abline(mod)
plot(x=log(l$area), y=log(l$tnlc), cex=log(l$dbh/1000))
abline(plot)
abline(plot)
abline(mod)
plot(x=log(l$area), y=log(l$tnlc), cex=log(l$dbh/1000), xlab = "logged leaf area", ylab = "leaf number")
plot(x=log(l$area), y=log(l$tnlc), cex=log(l$dbh/1000), xlab = "logged leaf area", ylab = "leaf number",
pch=16, col=round(l$cii))
plot(x=log(l$area), y=log(l$tnlc), cex=log(l$dbh/1000), xlab = "logged leaf area", ylab = "leaf number",
pch=16, col=round(l$cii)), legend( "topright",pch = 16, col=1:3,legend=1:3)
plot(x=log(l$area), y=log(l$tnlc), cex=log(l$dbh/1000), xlab = "logged leaf area", ylab = "leaf number",
pch=16, col=round(l$cii))
legend( "topright",pch = 16, col=1:3,legend=1:3)
legend( "topright",pch = 16, col=1:3,legend=1:3, title = "L")
legend( "topright",pch = 16, col=1:3,legend=1:3, title = "Light")
legend("bottomleft", pch=1, col=1, legend = 1:4, cex = log(1:4))
legend("bottomleft", pch=1, col=1, legend = 1:4, cex+log(1:4))
legend("bottomleft", pch=1, col=1, legend = 1:4, cex=log(1:4))
legend("bottomleft", pch=1, col=1, legend = 1:4, cex=log(1:3))
legend("bottomleft", pch=1, col=1, legend = 1:4, cex= log(1:4))
legend("bottomleft", pch=1, col=1, legend = 1:4, cex = log(1:4))
legend("bottomleft", pch=1, col=2, legend = 1:4, cex = log(1:4))
legend("bottomleft", pch=16, col=1, legend = 1:4, cex = log(1:4))
legend("bottomleft", pch=1, col=1, legend=1:4, cex = log(1:4))
legend("bottomleft", pch=1, col=1, legend=1:4, cex = log(1))
legend("bottomleft", pch=1, col=1, legend=1:4, cex = 1:4)
legend("bottomleft", pch=1, col=1, legend=1:4, cex = log("1:4")
range(l$dbh/1000)
range(l$dbh/1000)
legend("bottomleft", pch=1, col=1, legend=1:4, cex = log(c( 1.1:4.073)))
legend("bottomleft", pch=1, col=1, legend=1:4, cex = log(c( 1.1, 2.1, 3.1, 4.1)))
legend("bottomleft", pch=1, col=1, legend=1:4, cex = log(c( 1.1: 4.1)))
legend("bottomleft", pch=1, col=1, legend=1:4, cex = log(1.1: 4.1))
legend("bottomleft", pch=1, col=1, legend=1:4, cex = log(1.1))
plot(x=log(l$area), y=log(l$tnlc), cex=log(l$dbh/1000+1), xlab = "logged leaf area", ylab = "leaf number",
pch=16, col=round(l$cii))
legend( "topright",pch = 16, col=1:3,legend=1:3, title = "Light")
legend("bottomleft", pch=1, col=1, legend=1:4, cex = log(1:4+1))
legend("bottomleft", pch=1, col=1, legend=1:4, cex = log(1:4))
legend("bottomleft", pch=1, col=1, legend=1:4, cex = 1:4
legend("bottomleft", pch=1, col=1, legend=1:4, cex = 1:4)
c = read.csv("Leaf Area and Shape From Trip5-10.csv", stringsAsFactors = FALSE) # load raw data
head(c)
head(c); str(c)
c  = c[215:4540,] # remove empty lines
d = strsplit(c$file.name, "_")
d
e = lapply(d, function(x) x[1])
e
f = unlist(e) # coerce the list into a vector
f
f[f=="230182POUFUL"]
# Some small fixs..
f[f=="230182POUFUL"]= 230182
f[f=="230378LACSP1"]= 230378
f= as.numeric(f) # coerce a character vector into a numeric one
f
c $plant.ID = f
c = read.csv("Leaf Area and Shape From Trip5-10.csv", stringsAsFactors = FALSE) # load raw leaf area data
head(c); str(c)
c = read.csv("Leaf Area and Shape From Trip5-10.csv", stringsAsFactors = FALSE) # load raw leaf area data
head(c); str(c)
c  = c[215:4540,] # remove empty lines
d = strsplit(c$file.name, "_") # split file name in order to extract plant ID
e = lapply(d, function(x) x[1]) # extract plant ID
f = unlist(e) # coerce the list into a vector
# Some small fixs..
f[f=="230182POUFUL"]= 230182
f[f=="230378LACSP1"]= 230378
f= as.numeric(f) # coerce a character vector into a numeric one (plants without a valid ID will be assigned NAs)
c $plant.ID = f # fill plant ID column in the original data frame
k = aggregate(Area.pred..cm.2.~plant.ID,c,mean) # claculate mean leaf size per plant
k
architect = read.csv("architect.csv") # load raw architecture data
architect= subset(architect, select = c("plantID", "dbh", "tnlc", "cii")) # simplify architecture data frame
# Change column names
names(k)[1] = "plantID"
names(k)[2] = "area"
l= merge(architect, k, by = "plantID") # combine architecture and leaf size data frames
l
l= subset(l, !is.na(dbh) & !is.na(tnlc) & !is.na(cii)) # remove NAs
head(l)
plot(tnlc~dbh/1000,l)
dbh/1000
plot(l$tnlc~l$dbh/1000)
plot(y=l$tnlc,x=l$dbh/1000)
plot(y=l$tnlc,x=l$dbh/1000,log="xy")
plot(y=l$tnlc,x=l$dbh/1000,log="xy",xlab="Sapling DBH (cm)",ylab="Total number of leaves")
mod(y=l$tnlc,x=l$dbh/1000)
mod(l$tnlc~l$dbh/1000)
lm(l$tnlc~l$dbh/1000)
lm(l$tnlc~(l$dbh/1000))
l$dbh
l$dbh = l$dbh/1000 # rescale DBH to cm
head(l)
lm(l$tnlc~(l$dbh/1000))
lm(tnlc~dbh,l)
n.d = lm(tnlc~dbh,l)
nd.mod = lm(tnlc~dbh,l)
nd.mod
nd.mod = lm(tnlc~dbh,l); summary(nd.mod)
nd.mod = lm(log(tnlc)~log(dbh),l); summary(nd.mod)
legend("topleft",text.col=2,"oi")
plot(y=l$tnlc,x=l$dbh,log="xy",xlab="Sapling DBH (cm)",ylab="Total number of leaves")
legend("topleft",text.col=2,"oi",bty="n")
legend("topleft",text.col=2,expression(paste0(R^2=)),bty="n")
legend("topleft",text.col=2,expression(paste0(R^2,"=",round(2.2))),bty="n")
plot(y=l$tnlc,x=l$dbh,log="xy",xlab="Sapling DBH (cm)",ylab="Total number of leaves")
legend("topleft",text.col=2,expression(paste0(R^2," = 0.09")),bty="n")
plot(y=l$tnlc,x=l$dbh,log="xy",xlab="Sapling DBH (cm)",ylab="Total number of leaves")
legend("topleft",text.col=2,expression(paste(R^2," = 0.09")),bty="n")
plot(y=l$tnlc,x=l$dbh,log="xy",xlab="Sapling DBH (cm)",ylab="Total number of leaves")
legend("topleft",text.col=2,expression(paste(R^2," = 0.09; p < 0.001")),bty="n")
plot(y=l$tnlc,x=l$dbh,log="xy",xlab="Sapling DBH (cm)",ylab="Total number of leaves")
legend("topleft",text.col=2,c(expression(paste(R^2," = 0.09")),"p < 0.001"),bty="n")
abline(nd.mod,col=2,lwd=2)
abline(nd.mod,col=2,lwd=2,untf=T)
nd.mod2 = lm(tnlc~dbh,l); summary(nd.mod2)
plot(y=l$tnlc,x=l$dbh,log="xy",xlab="Sapling DBH (cm)",ylab="Total number of leaves")
legend("topleft",text.col=2,c(expression(paste(R^2," = 0.09")),"p < 0.001"),bty="n")
abline(nd.mod,col=2,lwd=2,untf=T)
abline(nd.mod,col=2,lwd=2)
abline(nd.mod,col=2,lwd=2)
nd.mod
?abline
nd.mod
nd.mod$coef
exp(nd.mod$coef)
abline(exp(nd.mod$coef),col=2,lwd=2)
plot(y=l$tnlc,x=l$dbh,log="xy",xlab="Sapling DBH (cm)",ylab="Total number of leaves")
legend("topleft",text.col=2,c(expression(paste(R^2," = 0.09")),"p < 0.001"),bty="n")
abline(exp(nd.mod$coef),col=2,lwd=2)
abline(nd.mod$coef,col=2,lwd=2)
nd.mod$coef
nd.mod$coef[1]
nd.mod$coef[2]
abline(a=nd.mod$coef[1],b=nd.mod$coef[2],col=2,lwd=2)
plot(y=l$tnlc,x=l$dbh,log="xy",xlab="Sapling DBH (cm)",ylab="Total number of leaves")
legend("topleft",text.col=2,c(expression(paste(R^2," = 0.09")),"p < 0.001"),bty="n")
abline(a=nd.mod$coef[1],b=nd.mod$coef[2],col=2,lwd=2)
abline(a=exp(nd.mod$coef[1]),b=nd.mod$coef[2],col=2,lwd=2)
exp(nd.mod$coef[1])
curve(1,add=T,col=2,lwd=2)
curve(x,add=T,col=2,lwd=2)
curve(x*1,add=T,col=2,lwd=2)
curve(exp(x),add=T,col=2,lwd=2)
curve(nd.mod$coef[1]+nd.mod$coef[2]*x,add=T,col=2,lwd=2)
curve(exp(nd.mod$coef[1])*x^nd.mod$coef[2],add=T,col=2,lwd=2)
plot(y=l$tnlc,x=l$dbh,log="xy",xlab="Sapling DBH (cm)",ylab="Total number of leaves")
legend("topleft",text.col=2,c(expression(paste(R^2," = 0.09")),"p < 0.001"),bty="n")
curve(exp(nd.mod$coef[1])*x^nd.mod$coef[2],add=T,col=2,lwd=2)
plot(y=log(l$tnlc),x=log(l$dbh),xlab="Log(DBH)",ylab="Log(number of leaves)")
legend("topleft",text.col=2,c(expression(paste(R^2," = 0.09")),"p < 0.001"),bty="n")
abline(a=exp(nd.mod$coef[1]),b=nd.mod$coef[2],col=2,lwd=2)
curve(exp(nd.mod$coef[1])*x^nd.mod$coef[2],add=T,col=2,lwd=2)
plot(y=l$tnlc,x=l$dbh,log="xy",xlab="Sapling DBH (cm)",ylab="Total number of leaves")
legend("topleft",text.col=2,c(expression(paste(R^2," = 0.09")),"p < 0.001"),bty="n")
abline(a=exp(nd.mod$coef[1]),b=nd.mod$coef[2],col=2,lwd=2)
curve(exp(nd.mod$coef[1]+nd.mod$coef[2]*x,add=T,col=2,lwd=2)
plot(y=log(l$tnlc),x=log(l$dbh),xlab="Log(DBH)",ylab="Log(number of leaves)")
legend("topleft",text.col=2,c(expression(paste(R^2," = 0.09")),"p < 0.001"),bty="n")
abline(a=exp(nd.mod$coef[1]),b=nd.mod$coef[2],col=2,lwd=2)
curve(nd.mod$coef[1])*x^nd.mod$coef[2],add=T,col=2,lwd=2)
curve(exp(nd.mod$coef[1]+nd.mod$coef[2]*x),add=T,col=2,lwd=2)
plot(y=log(l$tnlc),x=log(l$dbh),xlab="Log(DBH)",ylab="Log(number of leaves)")
legend("topleft",text.col=2,c(expression(paste(R^2," = 0.09")),"p < 0.001"),bty="n")
abline(a=exp(nd.mod$coef[1]),b=nd.mod$coef[2],col=2,lwd=2)
curve(nd.mod$coef[1])*x^nd.mod$coef[2],add=T,col=2,lwd=2)
nd.mod$coef[1])
nd.mod$coef[1]
abline(nd.mod,col=2,lwd=2)
plot(y=l$tnlc,x=l$dbh,log="xy",xlab="Sapling DBH (cm)",ylab="Total number of leaves")
legend("topleft",text.col=2,c(expression(paste(R^2," = 0.09")),"p < 0.001"),bty="n")
abline(a=exp(nd.mod$coef[1]),b=nd.mod$coef[2],col=2,lwd=2)
curve(exp(nd.mod$coef[1]+nd.mod$coef[2]*x),add=T,col=2,lwd=2)
plot(y=l$tnlc,x=l$dbh,log="xy",xlab="Sapling DBH (cm)",ylab="Total number of leaves")
legend("topleft",text.col=2,c(expression(paste(R^2," = 0.09")),"p < 0.001"),bty="n")
curve(exp(nd.mod$coef[1])*x^nd.mod$coef[2],add=T,col=2,lwd=2)
plot(nd.mod)
plot(y=l$tnlc,x=l$dbh,log="xy",xlab="Sapling DBH (cm)",ylab="Total number of leaves")
legend("topleft",text.col=2,c(expression(paste(R^2," = 0.09")),"p < 0.001"),bty="n")
curve(exp(nd.mod$coef[1])*x^nd.mod$coef[2],add=T,col=2,lwd=2)
nd.mod$residuals
hist(nd.mod$residuals)
hist(log(nd.mod$residuals))
head()
head(l)
lm(nd.mod$residuals~log(l$area))
nda.mod = lm(nd.mod$residuals~log(l$area)); summary(nd.mod)
nda.mod = lm(nd.mod$residuals~log(l$area)); summary(nda.mod)
head(l)
traits = read.csv("traits.csv") # load raw trait data frame
traits
head(traits)
head(l)
g = merge(x=traits[,c("plantID", "spcod")],y=l,by= "plantID")
head(g)
length(unique(g$spcod)) # number of species sampled
l$tnlc*l$area
hist(l$tnlc*l$area)
hist(log(l$tnlc*l$area))
plot(x=l$dbh,y=log(l$tnlc*l$area))
plot(x=log(l$dbh),y=log(l$tnlc*l$area))
ad.mod = lm(log(l$tnlc*l$area)~log(l$dbh))
ad.mod = lm(log(l$tnlc*l$area)~log(l$dbh)); summary(ad.mod)
head(traits)
head(g)
g = merge(x=traits[,c("plantID", "spcod","muf")],y=l,by= "plantID")
head(g)
length(unique(g$spcod)) # number of species sampled
g$muf
head(traits)
plot(x=log(l$dbh),y=log(l$tnlc*l$area))
c = read.csv("Leaf Area and Shape From Trip5-10.csv", stringsAsFactors = FALSE) # load raw leaf area data
head(c); str(c)
c  = c[215:4540,] # remove empty lines
d = strsplit(c$file.name, "_") # split file name in order to extract plant ID
e = lapply(d, function(x) x[1]) # extract plant ID
f = unlist(e) # coerce the list into a vector
# Some small fixs..
f[f=="230182POUFUL"]= 230182
f[f=="230378LACSP1"]= 230378
f= as.numeric(f) # coerce a character vector into a numeric one (plants without a valid ID will be assigned NAs)
c $plant.ID = f # fill plant ID column in the original data frame
k = aggregate(Area.pred..cm.2.~plant.ID,c,mean) # claculate mean leaf size per plant
architect = read.csv("architect.csv") # load raw architecture data
architect= subset(architect, select = c("plantID", "dbh", "tnlc", "cii")) # simplify architecture data frame
# Change column names
names(k)[1] = "plantID"
names(k)[2] = "area"
l= merge(architect, k, by = "plantID") # combine architecture and leaf size data frames
l= subset(l, !is.na(dbh) & !is.na(tnlc) & !is.na(cii)) # remove NAs
l$dbh = l$dbh/1000 # rescale DBH to cm
head(l)
nd.mod = lm(log(tnlc)~log(dbh),l); summary(nd.mod)
nda.mod = lm(nd.mod$residuals~log(l$area)); summary(nda.mod)
plot(y=l$tnlc,x=l$dbh,log="xy",xlab="Sapling DBH (cm)",ylab="Total number of leaves")
legend("topleft",text.col=2,c(expression(paste(R^2," = 0.09")),"p < 0.001"),bty="n")
curve(exp(nd.mod$coef[1])*x^nd.mod$coef[2],add=T,col=2,lwd=2)
traits = read.csv("traits.csv") # load raw trait data frame
g = merge(x=traits[,c("plantID", "spcod","muf")],y=l,by= "plantID")
head(g)
length(unique(g$spcod)) # number of species sampled
ad.mod = lm(log(l$tnlc*l$area)~log(l$dbh)); summary(ad.mod)
plot(x=log(l$dbh),y=log(l$tnlc*l$area))
head(g)
subset(g,plantID%in%c(230182,230303,230046,230441,230464,240266,220078,220212,15364,100790))
subset(g,plantID%in%c(230182,230303,230046,230441,230464,240226,220078,220212,15364,100790))
